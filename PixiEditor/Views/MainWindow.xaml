<Window x:Class="PixiEditor.MainWindow" MinHeight="1000" MinWidth="1100"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:vm="clr-namespace:PixiEditor.ViewModels"
        xmlns:vws="clr-namespace:PixiEditor.Views"
        xmlns:helpers="clr-namespace:PixiEditor.Helpers"
        xmlns:converters="clr-namespace:PixiEditor.Helpers.Converters"
        xmlns:behaviors="clr-namespace:PixiEditor.Helpers.Behaviours"
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:xcad="http://schemas.xceed.com/wpf/xaml/avalondock"
        xmlns:ui="clr-namespace:PixiEditor.Helpers.UI"
        xmlns:cmd="http://www.galasoft.ch/mvvmlight" xmlns:shell="clr-namespace:Microsoft.Windows.Shell;assembly=Xceed.Wpf.AvalonDock"
        mc:Ignorable="d" WindowStyle="None" 
        Title="PixiEditor" Name="mainWindow" Height="1000" Width="1600" Background="#FF252424" 
        WindowStartupLocation="CenterScreen"  WindowState="Maximized" DataContext="{DynamicResource ViewModelMain}">

    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="32" ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}" />
    </WindowChrome.WindowChrome>

    <Window.Resources>
        <vm:ViewModelMain x:Key="ViewModelMain"/>
        <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
        <helpers:ToolSizeToIntConverter x:Key="ToolSizeToIntConverter"/>
        <converters:BoolToColorConverter x:Key="BoolToColorConverter"/>
        <converters:BoolToIntConverter x:Key="BoolToIntConverter"/>
    </Window.Resources>

    <Window.CommandBindings>
        <CommandBinding Command="{x:Static SystemCommands.CloseWindowCommand}" CanExecute="CommandBinding_CanExecute" Executed="CommandBinding_Executed_Close" />
        <CommandBinding Command="{x:Static SystemCommands.MaximizeWindowCommand}" CanExecute="CommandBinding_CanExecute" Executed="CommandBinding_Executed_Maximize" />
        <CommandBinding Command="{x:Static SystemCommands.MinimizeWindowCommand}" CanExecute="CommandBinding_CanExecute" Executed="CommandBinding_Executed_Minimize" />
        <CommandBinding Command="{x:Static SystemCommands.RestoreWindowCommand}" CanExecute="CommandBinding_CanExecute" Executed="CommandBinding_Executed_Restore" />
    </Window.CommandBindings>

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="KeyDown">
            <cmd:EventToCommand Command="{Binding KeyDownCommand}" PassEventArgsToCommand="True"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <Grid Name="mainGrid" Margin="5">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="37*"/>
            <ColumnDefinition Width="1416*"/>
            <ColumnDefinition Width="147*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="35*"/>
            <RowDefinition Height="29*"/>
            <RowDefinition Height="895*"/>
            <RowDefinition Height="30*"/>
        </Grid.RowDefinitions>

        <DockPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3">
            <Image DockPanel.Dock="Left" HorizontalAlignment="Left" VerticalAlignment="Top" Source="/Images/PixiEditorLogo.png" Width="20" Height="20" Margin="5,5,0,0"/>
            <Menu WindowChrome.IsHitTestVisibleInChrome="True" Margin="10, 4, 0, 0" DockPanel.Dock="Left" HorizontalAlignment="Left" VerticalAlignment="Top" Background="Transparent" IsMainMenu="True">
                <Menu.Resources>
                    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource menuItemStyle}"/>
                </Menu.Resources>
                <MenuItem Header="_File">
                <MenuItem InputGestureText="CTRL+N" Header="_New" Command="{Binding GenerateDrawAreaCommand}"/>
                <MenuItem Header="_Open" InputGestureText="Ctrl+O" Command="{Binding OpenFileCommand}"/>
                <MenuItem Header="_Export" InputGestureText="Ctrl+S" Command="{Binding SaveFileCommand}"/>
                <MenuItem Header="_Export As..." InputGestureText="Ctrl+Shift+S" Command="{Binding SaveFileCommand}" CommandParameter="AsNew"/>
            </MenuItem>
                <MenuItem Header="_Edit">
                <MenuItem Header="_Undo" InputGestureText="Ctrl+Z" Command="{Binding UndoCommand}"/>
                <MenuItem Header="_Redo" InputGestureText="Ctrl+Y" Command="{Binding RedoCommand}"/>
            </MenuItem>
        </Menu>
            <StackPanel DockPanel.Dock="Right" VerticalAlignment="Top" Orientation="Horizontal" HorizontalAlignment="Right" WindowChrome.IsHitTestVisibleInChrome="True">
                <Button Style="{StaticResource MinimizeButtonStyle}" WindowChrome.IsHitTestVisibleInChrome="True" ToolTip="Minimize"
                            Command="{x:Static SystemCommands.MinimizeWindowCommand}"/>
                <Button x:Name="RestoreButton" Visibility="Visible" Style="{StaticResource RestoreButtonStyle}" 
                            Command="{x:Static SystemCommands.RestoreWindowCommand}" WindowChrome.IsHitTestVisibleInChrome="True" ToolTip="Restore"/>
                <Button x:Name="MaximizeButton" Visibility="Collapsed" Style="{StaticResource MaximizeButtonStyle}" 
                            Command="{x:Static SystemCommands.MaximizeWindowCommand}" WindowChrome.IsHitTestVisibleInChrome="True" ToolTip="Maximize" />
                <Button Style="{StaticResource CloseButtonStyle}" WindowChrome.IsHitTestVisibleInChrome="True" ToolTip="Close"
                            Command="{x:Static SystemCommands.CloseWindowCommand}"/>
            </StackPanel>
        </DockPanel>
        <StackPanel Background="#404040" Orientation="Horizontal" Grid.ColumnSpan="2" Margin="0,30,0,0" Grid.RowSpan="2">
            <ItemsControl ItemsSource="{Binding BitmapManager.SelectedTool.Toolbar.Settings}">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Horizontal" Margin="10, 0, 0, 0"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="10,0,10,0">
                            <Label Visibility="{Binding HasLabel, Converter={StaticResource BoolToVisibilityConverter}}" Foreground="White" Content="{Binding Label}"/>
                            <ContentPresenter Content="{Binding SettingControl}"/>
                        </StackPanel>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </StackPanel>
        <Grid Grid.Column="1" Grid.Row="2" Background="#303030" Margin="0,7,5,0">
            <Grid>
                <vws:MainDrawingPanel x:Name="DrawingPanel" CenterOnStart="True" Cursor="{Binding ToolCursor}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseMove">
                            <i:InvokeCommandAction Command="{Binding MouseMoveCommand}"/>
                        </i:EventTrigger>
                        <i:EventTrigger EventName="MouseUp">
                            <i:InvokeCommandAction Command="{Binding MouseUpCommand}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <i:Interaction.Behaviors>
                        <behaviors:MouseBehaviour RelativeTo="{Binding ElementName=DrawingPanel, Path=Item}" MouseX="{Binding MouseXOnCanvas, Mode=OneWayToSource}" MouseY="{Binding MouseYOnCanvas, Mode=OneWayToSource}"/>
                    </i:Interaction.Behaviors>
                    <vws:MainDrawingPanel.Item>
                        <Canvas Width="{Binding BitmapManager.ActiveLayer.Width}" Height="{Binding BitmapManager.ActiveLayer.Height}" VerticalAlignment="Center" HorizontalAlignment="Center">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="MouseDown">
                                    <i:InvokeCommandAction Command="{Binding MouseDownCommand}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                            <Image Source="/Images/transparentbg.png" Height="{Binding BitmapManager.ActiveLayer.Height}" Width="{Binding BitmapManager.ActiveLayer.Width}" Opacity="0.9" Stretch="UniformToFill"/>
                            <Image Source="{Binding BitmapManager.PreviewLayer.LayerBitmap}" Panel.ZIndex="2" RenderOptions.BitmapScalingMode="NearestNeighbor" Stretch="Uniform" Width="{Binding BitmapManager.PreviewLayer.Width}" Height="{Binding BitmapManager.PreviewLayer.Height}"/>
                            <ItemsControl ItemsSource="{Binding BitmapManager.Layers}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <Grid/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Image Source="{Binding LayerBitmap}" Visibility="{Binding IsVisible, Converter={StaticResource BoolToVisibilityConverter}}" RenderOptions.BitmapScalingMode="NearestNeighbor" Stretch="Uniform" Width="{Binding Width}" Height="{Binding Height}"/>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </Canvas>
                    </vws:MainDrawingPanel.Item>
                </vws:MainDrawingPanel>
            </Grid>
        </Grid>

        <StackPanel Orientation="Vertical" Cursor="Arrow" Grid.Row="2" Grid.Column="0" Margin="0,7,5,0" Background="#404040" Grid.RowSpan="2">
            
            <ItemsControl ItemsSource="{Binding ToolSet}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Button BorderBrush="White" BorderThickness="{Binding IsActive, Converter={StaticResource BoolToIntConverter}}"
                                Style="{StaticResource ToolButtonStyle}" 
                                Command="{Binding Path=DataContext.SelectToolCommand,
                            RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
                                CommandParameter="{Binding ToolType}" ToolTip="{Binding Tooltip}">
                            <Button.Background>
                                <ImageBrush ImageSource="{Binding ImagePath}" Stretch="Uniform"/>
                            </Button.Background>
                        </Button>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </StackPanel>

        <DockPanel Grid.Column="2" Background="#404040" Margin="0,30,0,0" Grid.RowSpan="3">
            <Grid DockPanel.Dock="Top" HorizontalAlignment="Center" Width="100"  Margin="0,20,0,0" Height="100">
                <Rectangle Height="70" Width="70" HorizontalAlignment="Left" VerticalAlignment="Top" Stroke="Black" StrokeThickness="1" Panel.ZIndex="1">
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{Binding PrimaryColor, Mode=OneWay}"/>
                    </Rectangle.Fill>
                </Rectangle>
                <xctk:ColorPicker Width="70" Panel.ZIndex="2" Height="70" VerticalAlignment="Top" HorizontalAlignment="Left" UsingAlphaChannel="True" AvailableColorsSortingMode="Alphabetical" ShowDropDownButton="False" Background="Transparent" BorderThickness="0" ShowRecentColors="True" SelectedColor="{Binding PrimaryColor, Mode=TwoWay}"></xctk:ColorPicker>
                <Button Opacity="0.3" ToolTip="Swap colors (X)" Command="{Binding SwapColorsCommand}" Width="25" Height="25" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="0 0 0 3" Style="{StaticResource ImageButtonStyle}">
                    <Button.Background>
                        <ImageBrush ImageSource="/Images/SwapArrows.png" Stretch="Fill"/>
                    </Button.Background>
                </Button>
                <Rectangle Height="70" Width="70" HorizontalAlignment="Right" VerticalAlignment="Bottom" Stroke="Black" StrokeThickness="1" Margin="0,0,4,5">
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{Binding SecondaryColor, Mode=OneWay}"/>
                    </Rectangle.Fill>
                </Rectangle>
                <xctk:ColorPicker Width="70" Height="70" HorizontalAlignment="Right" VerticalAlignment="Bottom" UsingAlphaChannel="True" AvailableColorsSortingMode="Alphabetical" ShowDropDownButton="False" Background="Transparent" BorderThickness="0" ShowRecentColors="True" Margin="0,0,4,5" SelectedColor="{Binding SecondaryColor, Mode=TwoWay}"/>
            </Grid>

            <xcad:DockingManager Grid.Column="2" Grid.Row="1" DockPanel.Dock="Top">
                <xcad:DockingManager.Style>
                    <Style TargetType="xcad:DockingManager">
                        <Setter Property="Foreground" Value="Snow"/>
                    </Style>
                </xcad:DockingManager.Style>
                <xcad:LayoutRoot x:Name="LayoutRoot">
                    <xcad:LayoutPanel Orientation="Vertical">
                        <xcad:LayoutAnchorablePane>
                            <xcad:LayoutAnchorable ContentId="layers" Title="Layers" CanHide="False" CanClose="False" CanAutoHide="False" CanDockAsTabbedDocument="False" CanFloat="True">
                                <StackPanel  Orientation="Vertical">
                                    <Button Command="{Binding NewLayerCommand}" Height="30" Content="New Layer" HorizontalAlignment="Stretch" Margin="5" Style="{StaticResource DarkRoundButton}"/>
                                    <ItemsControl ItemsSource="{Binding BitmapManager.Layers}" x:Name="layersItemsControl" AlternationCount="9999">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <ui:ReversedOrderStackPanel Orientation="Vertical"/>
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <Border BorderThickness="1" BorderBrush="Gray" MinWidth="60" Background="{Binding IsActive, Mode=TwoWay, Converter={StaticResource BoolToColorConverter}}">
                                                    <DockPanel>
                                                        <CheckBox VerticalAlignment="Center" Command="{Binding Path=DataContext.ReloadImageCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" IsThreeState="False" IsChecked="{Binding Path=IsVisible}"/>
                                                        <Button Background="Transparent" Style="{StaticResource BaseDarkButton}" FontSize="16" DockPanel.Dock="Left" Command="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, 
                            Path=DataContext.SetActiveLayerCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},
                            Path=(ItemsControl.AlternationIndex)}">
                                                            <Button.ContextMenu>
                                                                <ContextMenu>
                                                                    <MenuItem Header="Delete" Command="{Binding DeleteLayerCommand, Source={StaticResource ViewModelMain}}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},
                            Path=(ItemsControl.AlternationIndex)}"/>
                                                                    <MenuItem Header="Rename" Command="{Binding RenameLayerCommand, Source={StaticResource ViewModelMain}}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},
                            Path=(ItemsControl.AlternationIndex)}"/>
                                                                    <MenuItem Header="Move to front" Command="{Binding MoveToFrontCommand, Source={StaticResource ViewModelMain}}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},
                            Path=(ItemsControl.AlternationIndex)}"/>
                                                                    <MenuItem Header="Move to back" Command="{Binding MoveToBackCommand, Source={StaticResource ViewModelMain}}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},
                            Path=(ItemsControl.AlternationIndex)}"/>
                                                                </ContextMenu>
                                                            </Button.ContextMenu>
                                                            <vws:EditableTextBlock IsEditing="{Binding IsRenaming, Mode=TwoWay}" Text="{Binding Name, Mode=TwoWay}">
                                                            </vws:EditableTextBlock>
                                                        </Button>
                                                    </DockPanel>
                                                </Border>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>
                                </StackPanel>
                            </xcad:LayoutAnchorable>
                        </xcad:LayoutAnchorablePane>
                    </xcad:LayoutPanel>
                </xcad:LayoutRoot>
            </xcad:DockingManager>
        </DockPanel>

    </Grid>
</Window>
